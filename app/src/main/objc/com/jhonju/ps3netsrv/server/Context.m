//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./app/src/main/java/com/jhonju/ps3netsrv/server/Context.java
//

#include "J2ObjC_source.h"
#include "com/jhonju/ps3netsrv/server/Context.h"
#include "com/jhonju/ps3netsrv/server/enums/CDSectorSize.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/RandomAccessFile.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"

#if __has_feature(objc_arc)
#error "com/jhonju/ps3netsrv/server/Context must not be compiled with ARC (-fobjc-arc)"
#endif

@interface ComJhonjuPs3netsrvServerContext () {
 @public
  JavaNetSocket *socket_;
  NSString *rootDirectory_;
  jboolean readOnly_;
  JavaIoFile *file_;
  JavaIoRandomAccessFile *readOnlyFile_;
  JavaIoFile *writeOnlyFile_;
  ComJhonjuPs3netsrvServerEnumsCDSectorSize *cdSectorSize_;
}

@end

J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerContext, socket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerContext, rootDirectory_, NSString *)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerContext, file_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerContext, readOnlyFile_, JavaIoRandomAccessFile *)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerContext, writeOnlyFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerContext, cdSectorSize_, ComJhonjuPs3netsrvServerEnumsCDSectorSize *)

@implementation ComJhonjuPs3netsrvServerContext

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)socket
                         withNSString:(NSString *)rootDirectory
                          withBoolean:(jboolean)readOnly {
  ComJhonjuPs3netsrvServerContext_initWithJavaNetSocket_withNSString_withBoolean_(self, socket, rootDirectory, readOnly);
  return self;
}

- (NSString *)getRootDirectory {
  return rootDirectory_;
}

- (jboolean)isSocketConnected {
  return [((JavaNetSocket *) nil_chk(socket_)) isConnected];
}

- (ComJhonjuPs3netsrvServerEnumsCDSectorSize *)getCdSectorSize {
  return cdSectorSize_;
}

- (void)setCdSectorSizeWithComJhonjuPs3netsrvServerEnumsCDSectorSize:(ComJhonjuPs3netsrvServerEnumsCDSectorSize *)cdSectorSize {
  JreStrongAssign(&self->cdSectorSize_, cdSectorSize);
}

- (JavaNetInetAddress *)getRemoteAddress {
  return [((JavaNetSocket *) nil_chk(socket_)) getInetAddress];
}

- (JavaIoInputStream *)getInputStream {
  return [((JavaNetSocket *) nil_chk(socket_)) getInputStream];
}

- (JavaIoOutputStream *)getOutputStream {
  return [((JavaNetSocket *) nil_chk(socket_)) getOutputStream];
}

- (JavaIoFile *)getFile {
  return file_;
}

- (void)setFileWithJavaIoFile:(JavaIoFile *)file {
  JreStrongAssign(&self->file_, file);
  if (file != nil && [file isFile]) {
    @try {
      JreStrongAssignAndConsume(&readOnlyFile_, new_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(file, @"r"));
    }
    @catch (JavaIoFileNotFoundException *fe) {
      JreStrongAssign(&readOnlyFile_, nil);
      [fe printStackTrace];
    }
  }
  else {
    JreStrongAssign(&readOnlyFile_, nil);
  }
}

- (JavaIoFile *)getWriteOnlyFile {
  return writeOnlyFile_;
}

- (void)setWriteOnlyFileWithJavaIoFile:(JavaIoFile *)writeOnlyFile {
  JreStrongAssign(&self->writeOnlyFile_, writeOnlyFile);
}

- (JavaIoRandomAccessFile *)getReadOnlyFile {
  return readOnlyFile_;
}

- (jboolean)isReadOnly {
  return readOnly_;
}

- (void)close {
  @try {
    if (readOnlyFile_ != nil) [readOnlyFile_ close];
  }
  @catch (JavaIoIOException *ignored) {
  }
  @finally {
    JreStrongAssign(&readOnlyFile_, nil);
  }
  if (socket_ != nil && ![socket_ isClosed]) {
    @try {
      [socket_ close];
    }
    @catch (JavaIoIOException *ignored) {
    }
    @finally {
      JreStrongAssign(&socket_, nil);
    }
  }
}

- (void)dealloc {
  RELEASE_(socket_);
  RELEASE_(rootDirectory_);
  RELEASE_(file_);
  RELEASE_(readOnlyFile_);
  RELEASE_(writeOnlyFile_);
  RELEASE_(cdSectorSize_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComJhonjuPs3netsrvServerEnumsCDSectorSize;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaIoRandomAccessFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetSocket:withNSString:withBoolean:);
  methods[1].selector = @selector(getRootDirectory);
  methods[2].selector = @selector(isSocketConnected);
  methods[3].selector = @selector(getCdSectorSize);
  methods[4].selector = @selector(setCdSectorSizeWithComJhonjuPs3netsrvServerEnumsCDSectorSize:);
  methods[5].selector = @selector(getRemoteAddress);
  methods[6].selector = @selector(getInputStream);
  methods[7].selector = @selector(getOutputStream);
  methods[8].selector = @selector(getFile);
  methods[9].selector = @selector(setFileWithJavaIoFile:);
  methods[10].selector = @selector(getWriteOnlyFile);
  methods[11].selector = @selector(setWriteOnlyFileWithJavaIoFile:);
  methods[12].selector = @selector(getReadOnlyFile);
  methods[13].selector = @selector(isReadOnly);
  methods[14].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "socket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rootDirectory_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readOnly_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "file_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readOnlyFile_", "LJavaIoRandomAccessFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeOnlyFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cdSectorSize_", "LComJhonjuPs3netsrvServerEnumsCDSectorSize;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetSocket;LNSString;Z", "setCdSectorSize", "LComJhonjuPs3netsrvServerEnumsCDSectorSize;", "LJavaIoIOException;", "setFile", "LJavaIoFile;", "setWriteOnlyFile" };
  static const J2ObjcClassInfo _ComJhonjuPs3netsrvServerContext = { "Context", "com.jhonju.ps3netsrv.server", ptrTable, methods, fields, 7, 0x1, 15, 7, -1, -1, -1, -1, -1 };
  return &_ComJhonjuPs3netsrvServerContext;
}

@end

void ComJhonjuPs3netsrvServerContext_initWithJavaNetSocket_withNSString_withBoolean_(ComJhonjuPs3netsrvServerContext *self, JavaNetSocket *socket, NSString *rootDirectory, jboolean readOnly) {
  NSObject_init(self);
  JreStrongAssign(&self->rootDirectory_, rootDirectory);
  JreStrongAssign(&self->socket_, socket);
  JreStrongAssign(&self->cdSectorSize_, JreLoadEnum(ComJhonjuPs3netsrvServerEnumsCDSectorSize, CD_SECTOR_2352));
  self->readOnly_ = readOnly;
}

ComJhonjuPs3netsrvServerContext *new_ComJhonjuPs3netsrvServerContext_initWithJavaNetSocket_withNSString_withBoolean_(JavaNetSocket *socket, NSString *rootDirectory, jboolean readOnly) {
  J2OBJC_NEW_IMPL(ComJhonjuPs3netsrvServerContext, initWithJavaNetSocket_withNSString_withBoolean_, socket, rootDirectory, readOnly)
}

ComJhonjuPs3netsrvServerContext *create_ComJhonjuPs3netsrvServerContext_initWithJavaNetSocket_withNSString_withBoolean_(JavaNetSocket *socket, NSString *rootDirectory, jboolean readOnly) {
  J2OBJC_CREATE_IMPL(ComJhonjuPs3netsrvServerContext, initWithJavaNetSocket_withNSString_withBoolean_, socket, rootDirectory, readOnly)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComJhonjuPs3netsrvServerContext)
