//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./app/src/main/java/com/jhonju/ps3netsrv/server/commands/WriteFileCommand.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/jhonju/ps3netsrv/server/Context.h"
#include "com/jhonju/ps3netsrv/server/commands/AbstractCommand.h"
#include "com/jhonju/ps3netsrv/server/commands/WriteFileCommand.h"
#include "com/jhonju/ps3netsrv/server/exceptions/PS3NetSrvException.h"
#include "com/jhonju/ps3netsrv/server/utils/Utils.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/nio/ByteBuffer.h"

#if __has_feature(objc_arc)
#error "com/jhonju/ps3netsrv/server/commands/WriteFileCommand must not be compiled with ARC (-fobjc-arc)"
#endif

@interface ComJhonjuPs3netsrvServerCommandsWriteFileCommand () {
 @public
  jint numBytes_;
}

@end

@implementation ComJhonjuPs3netsrvServerCommandsWriteFileCommand

- (instancetype)initWithComJhonjuPs3netsrvServerContext:(ComJhonjuPs3netsrvServerContext *)ctx
                                                withInt:(jint)numBytes {
  ComJhonjuPs3netsrvServerCommandsWriteFileCommand_initWithComJhonjuPs3netsrvServerContext_withInt_(self, ctx, numBytes);
  return self;
}

- (void)executeTask {
  if ([((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) isReadOnly]) {
    [self sendWithByteArray:ERROR_CODE_BYTEARRAY_];
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(@"Failed to write file: server is executing as read only");
  }
  if ([((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) getReadOnlyFile] == nil) {
    [self sendWithByteArray:ERROR_CODE_BYTEARRAY_];
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(@"ERROR: file is null");
  }
  if (numBytes_ > ComJhonjuPs3netsrvServerCommandsAbstractCommand_BUFFER_SIZE) {
    [self sendWithByteArray:ERROR_CODE_BYTEARRAY_];
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"ERROR: data to write (%d) is larger than buffer size (%d)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numBytes_), JavaLangInteger_valueOfWithInt_(ComJhonjuPs3netsrvServerCommandsAbstractCommand_BUFFER_SIZE) } count:2 type:NSObject_class_()]));
  }
  JavaNioByteBuffer *buffer = ComJhonjuPs3netsrvServerUtilsUtils_readCommandDataWithJavaIoInputStream_withInt_([((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) getInputStream], numBytes_);
  if (buffer == nil) {
    [self sendWithByteArray:ERROR_CODE_BYTEARRAY_];
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(@"ERROR: on write file - content is null");
  }
  {
    JavaIoFileOutputStream *fos = create_JavaIoFileOutputStream_initWithJavaIoFile_([((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) getWriteOnlyFile]);
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      IOSByteArray *content;
      @try {
        content = [buffer array];
        [fos writeWithByteArray:content];
      }
      @catch (JavaIoIOException *ex) {
        [self sendWithByteArray:ERROR_CODE_BYTEARRAY_];
        @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(JreStrcat("$$", @"ERROR: writing file ", [ex getMessage]));
      }
      [self sendWithByteArray:ComJhonjuPs3netsrvServerUtilsUtils_intToBytesBEWithInt_(((IOSByteArray *) nil_chk(content))->size_)];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (fos != nil) {
        if (__primaryException1 != nil) {
          @try {
            [fos close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [fos close];
        }
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComJhonjuPs3netsrvServerContext:withInt:);
  methods[1].selector = @selector(executeTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numBytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComJhonjuPs3netsrvServerContext;I", "LJavaIoIOException;LComJhonjuPs3netsrvServerExceptionsPS3NetSrvException;" };
  static const J2ObjcClassInfo _ComJhonjuPs3netsrvServerCommandsWriteFileCommand = { "WriteFileCommand", "com.jhonju.ps3netsrv.server.commands", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_ComJhonjuPs3netsrvServerCommandsWriteFileCommand;
}

@end

void ComJhonjuPs3netsrvServerCommandsWriteFileCommand_initWithComJhonjuPs3netsrvServerContext_withInt_(ComJhonjuPs3netsrvServerCommandsWriteFileCommand *self, ComJhonjuPs3netsrvServerContext *ctx, jint numBytes) {
  ComJhonjuPs3netsrvServerCommandsAbstractCommand_initWithComJhonjuPs3netsrvServerContext_(self, ctx);
  self->numBytes_ = numBytes;
}

ComJhonjuPs3netsrvServerCommandsWriteFileCommand *new_ComJhonjuPs3netsrvServerCommandsWriteFileCommand_initWithComJhonjuPs3netsrvServerContext_withInt_(ComJhonjuPs3netsrvServerContext *ctx, jint numBytes) {
  J2OBJC_NEW_IMPL(ComJhonjuPs3netsrvServerCommandsWriteFileCommand, initWithComJhonjuPs3netsrvServerContext_withInt_, ctx, numBytes)
}

ComJhonjuPs3netsrvServerCommandsWriteFileCommand *create_ComJhonjuPs3netsrvServerCommandsWriteFileCommand_initWithComJhonjuPs3netsrvServerContext_withInt_(ComJhonjuPs3netsrvServerContext *ctx, jint numBytes) {
  J2OBJC_CREATE_IMPL(ComJhonjuPs3netsrvServerCommandsWriteFileCommand, initWithComJhonjuPs3netsrvServerContext_withInt_, ctx, numBytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComJhonjuPs3netsrvServerCommandsWriteFileCommand)
