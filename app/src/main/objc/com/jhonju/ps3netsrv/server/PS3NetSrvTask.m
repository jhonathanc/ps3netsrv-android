//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./app/src/main/java/com/jhonju/ps3netsrv/server/PS3NetSrvTask.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/jhonju/ps3netsrv/server/Context.h"
#include "com/jhonju/ps3netsrv/server/ContextHandler.h"
#include "com/jhonju/ps3netsrv/server/PS3NetSrvTask.h"
#include "com/jhonju/ps3netsrv/server/enums/EListType.h"
#include "com/jhonju/ps3netsrv/server/exceptions/PS3NetSrvException.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/util/Set.h"

#if __has_feature(objc_arc)
#error "com/jhonju/ps3netsrv/server/PS3NetSrvTask must not be compiled with ARC (-fobjc-arc)"
#endif

@interface ComJhonjuPs3netsrvServerPS3NetSrvTask () {
 @public
  id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler_;
  jint port_;
  NSString *folderPath_;
  jint maxConnections_;
  jboolean readOnly_;
  ComJhonjuPs3netsrvServerEnumsEListType *listType_;
  id<JavaUtilSet> filterAddresses_;
  JavaNetServerSocket *serverSocket_;
  jboolean isRunning_;
}

- (jboolean)allowIncomingConnectionWithNSString:(NSString *)hostAddress;

@end

J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerPS3NetSrvTask, exceptionHandler_, id<JavaLangThread_UncaughtExceptionHandler>)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerPS3NetSrvTask, folderPath_, NSString *)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerPS3NetSrvTask, listType_, ComJhonjuPs3netsrvServerEnumsEListType *)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerPS3NetSrvTask, filterAddresses_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComJhonjuPs3netsrvServerPS3NetSrvTask, serverSocket_, JavaNetServerSocket *)

__attribute__((unused)) static jboolean ComJhonjuPs3netsrvServerPS3NetSrvTask_allowIncomingConnectionWithNSString_(ComJhonjuPs3netsrvServerPS3NetSrvTask *self, NSString *hostAddress);

@implementation ComJhonjuPs3netsrvServerPS3NetSrvTask

- (instancetype)initWithInt:(jint)port
               withNSString:(NSString *)folderPath
                    withInt:(jint)maxConnections
                withBoolean:(jboolean)readOnly
            withJavaUtilSet:(id<JavaUtilSet>)filterAddresses
withComJhonjuPs3netsrvServerEnumsEListType:(ComJhonjuPs3netsrvServerEnumsEListType *)listType
withJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)exceptionHandler {
  ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withInt_withBoolean_withJavaUtilSet_withComJhonjuPs3netsrvServerEnumsEListType_withJavaLangThread_UncaughtExceptionHandler_(self, port, folderPath, maxConnections, readOnly, filterAddresses, listType, exceptionHandler);
  return self;
}

- (instancetype)initWithInt:(jint)port
               withNSString:(NSString *)folderPath
withJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)exceptionHandler {
  ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withJavaLangThread_UncaughtExceptionHandler_(self, port, folderPath, exceptionHandler);
  return self;
}

- (void)run {
  @try {
    JreStrongAssignAndConsume(&serverSocket_, new_JavaNetServerSocket_initWithInt_(port_));
    while (isRunning_) {
      JavaNetSocket *clientSocket = JreRetainedLocalValue([((JavaNetServerSocket *) nil_chk(serverSocket_)) accept]);
      NSString *hostAddress = JreRetainedLocalValue([((JavaNetInetAddress *) nil_chk([((JavaNetSocket *) nil_chk(clientSocket)) getInetAddress])) getHostAddress]);
      if (!ComJhonjuPs3netsrvServerPS3NetSrvTask_allowIncomingConnectionWithNSString_(self, hostAddress)) {
        [((id<JavaLangThread_UncaughtExceptionHandler>) nil_chk(exceptionHandler_)) uncaughtExceptionWithJavaLangThread:nil withJavaLangThrowable:create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Blocked connection: %s", [IOSObjectArray arrayWithObjects:(id[]){ hostAddress } count:1 type:NSObject_class_()]))];
        @try {
          [clientSocket close];
        }
        @catch (JavaIoIOException *e) {
          [exceptionHandler_ uncaughtExceptionWithJavaLangThread:nil withJavaLangThrowable:e];
        }
        continue;
      }
      [create_ComJhonjuPs3netsrvServerContextHandler_initWithComJhonjuPs3netsrvServerContext_withInt_withJavaLangThread_UncaughtExceptionHandler_(create_ComJhonjuPs3netsrvServerContext_initWithJavaNetSocket_withNSString_withBoolean_(clientSocket, folderPath_, readOnly_), maxConnections_, exceptionHandler_) start];
    }
  }
  @catch (JavaIoIOException *e) {
    [((id<JavaLangThread_UncaughtExceptionHandler>) nil_chk(exceptionHandler_)) uncaughtExceptionWithJavaLangThread:nil withJavaLangThrowable:e];
  }
  @finally {
    [self shutdown];
  }
}

- (jboolean)allowIncomingConnectionWithNSString:(NSString *)hostAddress {
  return ComJhonjuPs3netsrvServerPS3NetSrvTask_allowIncomingConnectionWithNSString_(self, hostAddress);
}

- (void)shutdown {
  isRunning_ = false;
  @try {
    if (serverSocket_ != nil) [serverSocket_ close];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:[e getMessage]];
  }
  @finally {
    JreStrongAssign(&serverSocket_, nil);
  }
}

- (void)dealloc {
  RELEASE_(exceptionHandler_);
  RELEASE_(folderPath_);
  RELEASE_(listType_);
  RELEASE_(filterAddresses_);
  RELEASE_(serverSocket_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withInt:withBoolean:withJavaUtilSet:withComJhonjuPs3netsrvServerEnumsEListType:withJavaLangThread_UncaughtExceptionHandler:);
  methods[1].selector = @selector(initWithInt:withNSString:withJavaLangThread_UncaughtExceptionHandler:);
  methods[2].selector = @selector(run);
  methods[3].selector = @selector(allowIncomingConnectionWithNSString:);
  methods[4].selector = @selector(shutdown);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "exceptionHandler_", "LJavaLangThread_UncaughtExceptionHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "folderPath_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxConnections_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readOnly_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listType_", "LComJhonjuPs3netsrvServerEnumsEListType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "filterAddresses_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "serverSocket_", "LJavaNetServerSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isRunning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;IZLJavaUtilSet;LComJhonjuPs3netsrvServerEnumsEListType;LJavaLangThread_UncaughtExceptionHandler;", "(ILjava/lang/String;IZLjava/util/Set<Ljava/lang/String;>;Lcom/jhonju/ps3netsrv/server/enums/EListType;Ljava/lang/Thread$UncaughtExceptionHandler;)V", "ILNSString;LJavaLangThread_UncaughtExceptionHandler;", "allowIncomingConnection", "LNSString;", "Ljava/util/Set<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ComJhonjuPs3netsrvServerPS3NetSrvTask = { "PS3NetSrvTask", "com.jhonju.ps3netsrv.server", ptrTable, methods, fields, 7, 0x1, 5, 9, -1, -1, -1, -1, -1 };
  return &_ComJhonjuPs3netsrvServerPS3NetSrvTask;
}

@end

void ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withInt_withBoolean_withJavaUtilSet_withComJhonjuPs3netsrvServerEnumsEListType_withJavaLangThread_UncaughtExceptionHandler_(ComJhonjuPs3netsrvServerPS3NetSrvTask *self, jint port, NSString *folderPath, jint maxConnections, jboolean readOnly, id<JavaUtilSet> filterAddresses, ComJhonjuPs3netsrvServerEnumsEListType *listType, id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler) {
  NSObject_init(self);
  self->isRunning_ = true;
  self->port_ = port;
  JreStrongAssign(&self->folderPath_, folderPath);
  self->maxConnections_ = maxConnections;
  self->readOnly_ = readOnly;
  JreStrongAssign(&self->filterAddresses_, filterAddresses);
  JreStrongAssign(&self->listType_, listType);
  JreStrongAssign(&self->exceptionHandler_, exceptionHandler);
}

ComJhonjuPs3netsrvServerPS3NetSrvTask *new_ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withInt_withBoolean_withJavaUtilSet_withComJhonjuPs3netsrvServerEnumsEListType_withJavaLangThread_UncaughtExceptionHandler_(jint port, NSString *folderPath, jint maxConnections, jboolean readOnly, id<JavaUtilSet> filterAddresses, ComJhonjuPs3netsrvServerEnumsEListType *listType, id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler) {
  J2OBJC_NEW_IMPL(ComJhonjuPs3netsrvServerPS3NetSrvTask, initWithInt_withNSString_withInt_withBoolean_withJavaUtilSet_withComJhonjuPs3netsrvServerEnumsEListType_withJavaLangThread_UncaughtExceptionHandler_, port, folderPath, maxConnections, readOnly, filterAddresses, listType, exceptionHandler)
}

ComJhonjuPs3netsrvServerPS3NetSrvTask *create_ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withInt_withBoolean_withJavaUtilSet_withComJhonjuPs3netsrvServerEnumsEListType_withJavaLangThread_UncaughtExceptionHandler_(jint port, NSString *folderPath, jint maxConnections, jboolean readOnly, id<JavaUtilSet> filterAddresses, ComJhonjuPs3netsrvServerEnumsEListType *listType, id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler) {
  J2OBJC_CREATE_IMPL(ComJhonjuPs3netsrvServerPS3NetSrvTask, initWithInt_withNSString_withInt_withBoolean_withJavaUtilSet_withComJhonjuPs3netsrvServerEnumsEListType_withJavaLangThread_UncaughtExceptionHandler_, port, folderPath, maxConnections, readOnly, filterAddresses, listType, exceptionHandler)
}

void ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withJavaLangThread_UncaughtExceptionHandler_(ComJhonjuPs3netsrvServerPS3NetSrvTask *self, jint port, NSString *folderPath, id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler) {
  NSObject_init(self);
  self->isRunning_ = true;
  self->port_ = port;
  JreStrongAssign(&self->folderPath_, folderPath);
  self->maxConnections_ = 0;
  self->readOnly_ = false;
  JreStrongAssign(&self->filterAddresses_, nil);
  JreStrongAssign(&self->listType_, JreLoadEnum(ComJhonjuPs3netsrvServerEnumsEListType, LIST_TYPE_NONE));
  JreStrongAssign(&self->exceptionHandler_, exceptionHandler);
}

ComJhonjuPs3netsrvServerPS3NetSrvTask *new_ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withJavaLangThread_UncaughtExceptionHandler_(jint port, NSString *folderPath, id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler) {
  J2OBJC_NEW_IMPL(ComJhonjuPs3netsrvServerPS3NetSrvTask, initWithInt_withNSString_withJavaLangThread_UncaughtExceptionHandler_, port, folderPath, exceptionHandler)
}

ComJhonjuPs3netsrvServerPS3NetSrvTask *create_ComJhonjuPs3netsrvServerPS3NetSrvTask_initWithInt_withNSString_withJavaLangThread_UncaughtExceptionHandler_(jint port, NSString *folderPath, id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler) {
  J2OBJC_CREATE_IMPL(ComJhonjuPs3netsrvServerPS3NetSrvTask, initWithInt_withNSString_withJavaLangThread_UncaughtExceptionHandler_, port, folderPath, exceptionHandler)
}

jboolean ComJhonjuPs3netsrvServerPS3NetSrvTask_allowIncomingConnectionWithNSString_(ComJhonjuPs3netsrvServerPS3NetSrvTask *self, NSString *hostAddress) {
  if (self->listType_ == JreLoadEnum(ComJhonjuPs3netsrvServerEnumsEListType, LIST_TYPE_NONE)) {
    return true;
  }
  if (self->filterAddresses_ == nil) {
    return self->listType_ == JreLoadEnum(ComJhonjuPs3netsrvServerEnumsEListType, LIST_TYPE_BLOCKED);
  }
  jboolean addressExists = [self->filterAddresses_ containsWithId:hostAddress];
  if (self->listType_ == JreLoadEnum(ComJhonjuPs3netsrvServerEnumsEListType, LIST_TYPE_ALLOWED)) {
    return addressExists;
  }
  return !addressExists;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComJhonjuPs3netsrvServerPS3NetSrvTask)
