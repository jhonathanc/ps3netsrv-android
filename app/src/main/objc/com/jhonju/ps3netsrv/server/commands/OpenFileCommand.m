//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./app/src/main/java/com/jhonju/ps3netsrv/server/commands/OpenFileCommand.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/jhonju/ps3netsrv/server/Context.h"
#include "com/jhonju/ps3netsrv/server/commands/AbstractCommand.h"
#include "com/jhonju/ps3netsrv/server/commands/FileCommand.h"
#include "com/jhonju/ps3netsrv/server/commands/IResult.h"
#include "com/jhonju/ps3netsrv/server/commands/OpenFileCommand.h"
#include "com/jhonju/ps3netsrv/server/enums/CDSectorSize.h"
#include "com/jhonju/ps3netsrv/server/exceptions/PS3NetSrvException.h"
#include "com/jhonju/ps3netsrv/server/utils/Utils.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/Throwable.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"

#if __has_feature(objc_arc)
#error "com/jhonju/ps3netsrv/server/commands/OpenFileCommand must not be compiled with ARC (-fobjc-arc)"
#endif

@interface ComJhonjuPs3netsrvServerCommandsOpenFileCommand ()

- (void)determineCdSectorSizeWithJavaIoRandomAccessFile:(JavaIoRandomAccessFile *)file;

@end

inline jint ComJhonjuPs3netsrvServerCommandsOpenFileCommand_get_RESULT_LENGTH(void);
#define ComJhonjuPs3netsrvServerCommandsOpenFileCommand_RESULT_LENGTH 16
J2OBJC_STATIC_FIELD_CONSTANT(ComJhonjuPs3netsrvServerCommandsOpenFileCommand, RESULT_LENGTH, jint)

inline jlong ComJhonjuPs3netsrvServerCommandsOpenFileCommand_get_CD_MINIMUM_SIZE(void);
#define ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD_MINIMUM_SIZE 2097152LL
J2OBJC_STATIC_FIELD_CONSTANT(ComJhonjuPs3netsrvServerCommandsOpenFileCommand, CD_MINIMUM_SIZE, jlong)

inline jlong ComJhonjuPs3netsrvServerCommandsOpenFileCommand_get_CD_MAXIMUM_SIZE(void);
#define ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD_MAXIMUM_SIZE 889192448LL
J2OBJC_STATIC_FIELD_CONSTANT(ComJhonjuPs3netsrvServerCommandsOpenFileCommand, CD_MAXIMUM_SIZE, jlong)

inline NSString *ComJhonjuPs3netsrvServerCommandsOpenFileCommand_get_PLAYSTATION_IDENTIFIER(void);
static NSString *ComJhonjuPs3netsrvServerCommandsOpenFileCommand_PLAYSTATION_IDENTIFIER = @"PLAYSTATION ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand, PLAYSTATION_IDENTIFIER, NSString *)

inline NSString *ComJhonjuPs3netsrvServerCommandsOpenFileCommand_get_CD001_IDENTIFIER(void);
static NSString *ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD001_IDENTIFIER = @"CD001";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand, CD001_IDENTIFIER, NSString *)

__attribute__((unused)) static void ComJhonjuPs3netsrvServerCommandsOpenFileCommand_determineCdSectorSizeWithJavaIoRandomAccessFile_(ComJhonjuPs3netsrvServerCommandsOpenFileCommand *self, JavaIoRandomAccessFile *file);

@interface ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult : NSObject < ComJhonjuPs3netsrvServerCommandsIResult > {
 @public
  jlong aFileSize_;
  jlong bModifiedTime_;
}

- (instancetype)init;

- (instancetype)initWithLong:(jlong)fileSize
                    withLong:(jlong)modifiedTime;

- (IOSByteArray *)toByteArray;

@end

J2OBJC_EMPTY_STATIC_INIT(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult)

__attribute__((unused)) static void ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *self);

__attribute__((unused)) static ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *new_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init(void);

__attribute__((unused)) static void ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *self, jlong fileSize, jlong modifiedTime);

__attribute__((unused)) static ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *new_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_(jlong fileSize, jlong modifiedTime) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_(jlong fileSize, jlong modifiedTime);

J2OBJC_TYPE_LITERAL_HEADER(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult)

@implementation ComJhonjuPs3netsrvServerCommandsOpenFileCommand

- (instancetype)initWithComJhonjuPs3netsrvServerContext:(ComJhonjuPs3netsrvServerContext *)ctx
                                              withShort:(jshort)filePathLength {
  ComJhonjuPs3netsrvServerCommandsOpenFileCommand_initWithComJhonjuPs3netsrvServerContext_withShort_(self, ctx, filePathLength);
  return self;
}

- (void)executeTask {
  JavaIoFile *file = JreRetainedLocalValue([self getFile]);
  if (![((JavaIoFile *) nil_chk(file)) exists]) {
    [((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) setFileWithJavaIoFile:nil];
    [self sendWithComJhonjuPs3netsrvServerCommandsIResult:create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init()];
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(@"Error: on OpenFileCommand - file not exists");
  }
  [((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) setFileWithJavaIoFile:file];
  @try {
    ComJhonjuPs3netsrvServerCommandsOpenFileCommand_determineCdSectorSizeWithJavaIoRandomAccessFile_(self, [((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) getReadOnlyFile]);
  }
  @catch (JavaIoIOException *e) {
    [((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) setFileWithJavaIoFile:nil];
    [self sendWithComJhonjuPs3netsrvServerCommandsIResult:create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init()];
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(@"Error: not possible to determine CD Sector size");
  }
  [self sendWithComJhonjuPs3netsrvServerCommandsIResult:create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_([file length], JreLongDiv([file lastModified], ComJhonjuPs3netsrvServerCommandsAbstractCommand_MILLISECONDS_IN_SECOND))];
}

- (void)determineCdSectorSizeWithJavaIoRandomAccessFile:(JavaIoRandomAccessFile *)file {
  ComJhonjuPs3netsrvServerCommandsOpenFileCommand_determineCdSectorSizeWithJavaIoRandomAccessFile_(self, file);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComJhonjuPs3netsrvServerContext:withShort:);
  methods[1].selector = @selector(executeTask);
  methods[2].selector = @selector(determineCdSectorSizeWithJavaIoRandomAccessFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RESULT_LENGTH", "I", .constantValue.asInt = ComJhonjuPs3netsrvServerCommandsOpenFileCommand_RESULT_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "CD_MINIMUM_SIZE", "J", .constantValue.asLong = ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD_MINIMUM_SIZE, 0x1a, -1, -1, -1, -1 },
    { "CD_MAXIMUM_SIZE", "J", .constantValue.asLong = ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD_MAXIMUM_SIZE, 0x1a, -1, -1, -1, -1 },
    { "PLAYSTATION_IDENTIFIER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "CD001_IDENTIFIER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LComJhonjuPs3netsrvServerContext;S", "LJavaIoIOException;LComJhonjuPs3netsrvServerExceptionsPS3NetSrvException;", "determineCdSectorSize", "LJavaIoRandomAccessFile;", "LJavaIoIOException;", &ComJhonjuPs3netsrvServerCommandsOpenFileCommand_PLAYSTATION_IDENTIFIER, &ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD001_IDENTIFIER, "LComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult;" };
  static const J2ObjcClassInfo _ComJhonjuPs3netsrvServerCommandsOpenFileCommand = { "OpenFileCommand", "com.jhonju.ps3netsrv.server.commands", ptrTable, methods, fields, 7, 0x1, 3, 5, -1, 7, -1, -1, -1 };
  return &_ComJhonjuPs3netsrvServerCommandsOpenFileCommand;
}

@end

void ComJhonjuPs3netsrvServerCommandsOpenFileCommand_initWithComJhonjuPs3netsrvServerContext_withShort_(ComJhonjuPs3netsrvServerCommandsOpenFileCommand *self, ComJhonjuPs3netsrvServerContext *ctx, jshort filePathLength) {
  ComJhonjuPs3netsrvServerCommandsFileCommand_initWithComJhonjuPs3netsrvServerContext_withShort_(self, ctx, filePathLength);
}

ComJhonjuPs3netsrvServerCommandsOpenFileCommand *new_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_initWithComJhonjuPs3netsrvServerContext_withShort_(ComJhonjuPs3netsrvServerContext *ctx, jshort filePathLength) {
  J2OBJC_NEW_IMPL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand, initWithComJhonjuPs3netsrvServerContext_withShort_, ctx, filePathLength)
}

ComJhonjuPs3netsrvServerCommandsOpenFileCommand *create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_initWithComJhonjuPs3netsrvServerContext_withShort_(ComJhonjuPs3netsrvServerContext *ctx, jshort filePathLength) {
  J2OBJC_CREATE_IMPL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand, initWithComJhonjuPs3netsrvServerContext_withShort_, ctx, filePathLength)
}

void ComJhonjuPs3netsrvServerCommandsOpenFileCommand_determineCdSectorSizeWithJavaIoRandomAccessFile_(ComJhonjuPs3netsrvServerCommandsOpenFileCommand *self, JavaIoRandomAccessFile *file) {
  if ([((JavaIoRandomAccessFile *) nil_chk(file)) length] < ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD_MINIMUM_SIZE || [file length] > ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD_MAXIMUM_SIZE) {
    [((ComJhonjuPs3netsrvServerContext *) nil_chk(self->ctx_)) setCdSectorSizeWithComJhonjuPs3netsrvServerEnumsCDSectorSize:nil];
    return;
  }
  {
    IOSObjectArray *a__ = ComJhonjuPs3netsrvServerEnumsCDSectorSize_values();
    ComJhonjuPs3netsrvServerEnumsCDSectorSize * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComJhonjuPs3netsrvServerEnumsCDSectorSize * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComJhonjuPs3netsrvServerEnumsCDSectorSize *cdSec = *b__++;
      jlong position = (JreLShift32(((ComJhonjuPs3netsrvServerEnumsCDSectorSize *) nil_chk(cdSec))->cdSectorSize_, 4)) + ComJhonjuPs3netsrvServerCommandsAbstractCommand_BYTES_TO_SKIP;
      IOSByteArray *buffer = [IOSByteArray arrayWithLength:20];
      [file seekWithLong:position];
      [file readWithByteArray:buffer];
      NSString *strBuffer = [NSString java_stringWithBytes:buffer charset:JreLoadStatic(JavaNioCharsetStandardCharsets, US_ASCII)];
      if ([strBuffer java_contains:ComJhonjuPs3netsrvServerCommandsOpenFileCommand_PLAYSTATION_IDENTIFIER] || [strBuffer java_contains:ComJhonjuPs3netsrvServerCommandsOpenFileCommand_CD001_IDENTIFIER]) {
        [((ComJhonjuPs3netsrvServerContext *) nil_chk(self->ctx_)) setCdSectorSizeWithComJhonjuPs3netsrvServerEnumsCDSectorSize:cdSec];
        break;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComJhonjuPs3netsrvServerCommandsOpenFileCommand)

@implementation ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLong:(jlong)fileSize
                    withLong:(jlong)modifiedTime {
  ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_(self, fileSize, modifiedTime);
  return self;
}

- (IOSByteArray *)toByteArray {
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_initWithInt_(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_RESULT_LENGTH);
  JavaLangThrowable *__primaryException1 = nil;
  @try {
    [out writeWithByteArray:ComJhonjuPs3netsrvServerUtilsUtils_longToBytesBEWithLong_(self->aFileSize_)];
    [out writeWithByteArray:ComJhonjuPs3netsrvServerUtilsUtils_longToBytesBEWithLong_(self->bModifiedTime_)];
    return [out toByteArray];
  }
  @catch (JavaLangThrowable *e) {
    __primaryException1 = e;
    @throw e;
  }
  @finally {
    if (out != nil) {
      if (__primaryException1 != nil) {
        @try {
          [out close];
        }
        @catch (JavaLangThrowable *e) {
          [__primaryException1 addSuppressedWithJavaLangThrowable:e];
        }
      }
      else {
        [out close];
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLong:withLong:);
  methods[2].selector = @selector(toByteArray);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "aFileSize_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bModifiedTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JJ", "LJavaIoIOException;", "LComJhonjuPs3netsrvServerCommandsOpenFileCommand;" };
  static const J2ObjcClassInfo _ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult = { "OpenFileResult", "com.jhonju.ps3netsrv.server.commands", ptrTable, methods, fields, 7, 0xa, 3, 2, 2, -1, -1, -1, -1 };
  return &_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult;
}

@end

void ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *self) {
  NSObject_init(self);
  self->aFileSize_ = ComJhonjuPs3netsrvServerCommandsAbstractCommand_ERROR_CODE;
  self->bModifiedTime_ = ComJhonjuPs3netsrvServerCommandsAbstractCommand_ERROR_CODE;
}

ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *new_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init() {
  J2OBJC_NEW_IMPL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult, init)
}

ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_init() {
  J2OBJC_CREATE_IMPL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult, init)
}

void ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *self, jlong fileSize, jlong modifiedTime) {
  NSObject_init(self);
  self->aFileSize_ = ComJhonjuPs3netsrvServerCommandsAbstractCommand_ERROR_CODE;
  self->bModifiedTime_ = ComJhonjuPs3netsrvServerCommandsAbstractCommand_ERROR_CODE;
  self->aFileSize_ = fileSize;
  self->bModifiedTime_ = modifiedTime;
}

ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *new_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_(jlong fileSize, jlong modifiedTime) {
  J2OBJC_NEW_IMPL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult, initWithLong_withLong_, fileSize, modifiedTime)
}

ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult *create_ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult_initWithLong_withLong_(jlong fileSize, jlong modifiedTime) {
  J2OBJC_CREATE_IMPL(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult, initWithLong_withLong_, fileSize, modifiedTime)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComJhonjuPs3netsrvServerCommandsOpenFileCommand_OpenFileResult)
