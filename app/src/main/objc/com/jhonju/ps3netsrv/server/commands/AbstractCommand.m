//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./app/src/main/java/com/jhonju/ps3netsrv/server/commands/AbstractCommand.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/jhonju/ps3netsrv/server/Context.h"
#include "com/jhonju/ps3netsrv/server/commands/AbstractCommand.h"
#include "com/jhonju/ps3netsrv/server/commands/IResult.h"
#include "com/jhonju/ps3netsrv/server/exceptions/PS3NetSrvException.h"
#include "com/jhonju/ps3netsrv/server/utils/Utils.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"

#if __has_feature(objc_arc)
#error "com/jhonju/ps3netsrv/server/commands/AbstractCommand must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@implementation ComJhonjuPs3netsrvServerCommandsAbstractCommand

- (instancetype)initWithComJhonjuPs3netsrvServerContext:(ComJhonjuPs3netsrvServerContext *)ctx {
  ComJhonjuPs3netsrvServerCommandsAbstractCommand_initWithComJhonjuPs3netsrvServerContext_(self, ctx);
  return self;
}

- (void)sendWithComJhonjuPs3netsrvServerCommandsIResult:(id<ComJhonjuPs3netsrvServerCommandsIResult>)result {
  IOSByteArray *byteArray;
  @try {
    byteArray = [((id<ComJhonjuPs3netsrvServerCommandsIResult>) nil_chk(result)) toByteArray];
  }
  @catch (JavaIoIOException *e) {
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(@"ERROR on byte array conversion");
  }
  [self sendWithByteArray:byteArray];
}

- (void)sendWithByteArray:(IOSByteArray *)result {
  JavaIoOutputStream *os = JreRetainedLocalValue([((ComJhonjuPs3netsrvServerContext *) nil_chk(ctx_)) getOutputStream]);
  if (((IOSByteArray *) nil_chk(result))->size_ == ComJhonjuPs3netsrvServerCommandsAbstractCommand_EMPTY_SIZE) {
    @throw create_ComJhonjuPs3netsrvServerExceptionsPS3NetSrvException_initWithNSString_(@"Empty byte array to send to response");
  }
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:result];
  [os flush];
}

- (void)dealloc {
  RELEASE_(ctx_);
  RELEASE_(ERROR_CODE_BYTEARRAY_);
  RELEASE_(SUCCESS_CODE_BYTEARRAY_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 4, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComJhonjuPs3netsrvServerContext:);
  methods[1].selector = @selector(sendWithComJhonjuPs3netsrvServerCommandsIResult:);
  methods[2].selector = @selector(sendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctx_", "LComJhonjuPs3netsrvServerContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ERROR_CODE", "I", .constantValue.asInt = ComJhonjuPs3netsrvServerCommandsAbstractCommand_ERROR_CODE, 0x1c, -1, -1, -1, -1 },
    { "ERROR_CODE_BYTEARRAY_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "SUCCESS_CODE_BYTEARRAY_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "EMPTY_SIZE", "I", .constantValue.asInt = ComJhonjuPs3netsrvServerCommandsAbstractCommand_EMPTY_SIZE, 0x1c, -1, -1, -1, -1 },
    { "BUFFER_SIZE", "I", .constantValue.asInt = ComJhonjuPs3netsrvServerCommandsAbstractCommand_BUFFER_SIZE, 0x1c, -1, -1, -1, -1 },
    { "BYTES_TO_SKIP", "I", .constantValue.asInt = ComJhonjuPs3netsrvServerCommandsAbstractCommand_BYTES_TO_SKIP, 0x1c, -1, -1, -1, -1 },
    { "MILLISECONDS_IN_SECOND", "S", .constantValue.asShort = ComJhonjuPs3netsrvServerCommandsAbstractCommand_MILLISECONDS_IN_SECOND, 0x1c, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComJhonjuPs3netsrvServerContext;", "send", "LComJhonjuPs3netsrvServerCommandsIResult;", "LJavaIoIOException;LComJhonjuPs3netsrvServerExceptionsPS3NetSrvException;", "[B" };
  static const J2ObjcClassInfo _ComJhonjuPs3netsrvServerCommandsAbstractCommand = { "AbstractCommand", "com.jhonju.ps3netsrv.server.commands", ptrTable, methods, fields, 7, 0x401, 3, 8, -1, -1, -1, -1, -1 };
  return &_ComJhonjuPs3netsrvServerCommandsAbstractCommand;
}

@end

void ComJhonjuPs3netsrvServerCommandsAbstractCommand_initWithComJhonjuPs3netsrvServerContext_(ComJhonjuPs3netsrvServerCommandsAbstractCommand *self, ComJhonjuPs3netsrvServerContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->ERROR_CODE_BYTEARRAY_, ComJhonjuPs3netsrvServerUtilsUtils_intToBytesBEWithInt_(ComJhonjuPs3netsrvServerCommandsAbstractCommand_ERROR_CODE));
  JreStrongAssign(&self->SUCCESS_CODE_BYTEARRAY_, ComJhonjuPs3netsrvServerUtilsUtils_intToBytesBEWithInt_(0));
  JreStrongAssign(&self->ctx_, ctx);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComJhonjuPs3netsrvServerCommandsAbstractCommand)
